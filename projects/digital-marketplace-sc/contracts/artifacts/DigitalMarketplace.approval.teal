#pragma version 10

// This TEAL was generated by TEALScript v0.86.0
// https://github.com/algorandfoundation/TEALScript

// This contract is compliant with and/or implements the following ARCs: [ ARC4 ]

// The following ten lines of TEAL handle initial program flow
// This pattern is used to make it easy for anyone to parse the start of the program and determine if a specific action is allowed
// Here, action refers to the OnComplete in combination with whether the app is being created or called
// Every possible action for this contract is represented in the switch statement
// If the action is not implemented in the contract, its respective branch will be "*NOT_IMPLEMENTED" which just contains "err"
txn ApplicationID
!
int 6
*
txn OnCompletion
+
switch *call_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *create_NoOp *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED *NOT_IMPLEMENTED

*NOT_IMPLEMENTED:
	err

// createApplication(uint64)void
*abi_route_createApplication:
	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// execute createApplication(uint64)void
	callsub createApplication
	int 1
	return

// createApplication(assetId: number): void
createApplication:
	proto 1 0

	// contracts/digital-marketplace.algo.ts:12
	// this.assetId.value = AssetID.fromUint64(assetId)
	byte 0x61737365744964 // "assetId"
	frame_dig -1 // assetId: number
	app_global_put

	// contracts/digital-marketplace.algo.ts:13
	// this.deposited.value = 0
	byte 0x6465706f7369746564 // "deposited"
	int 0
	app_global_put

	// contracts/digital-marketplace.algo.ts:14
	// this.totalPrice.value = 0
	byte 0x746f74616c5072696365 // "totalPrice"
	int 0
	app_global_put
	retsub

// prepareDeposit(pay,uint64)void
*abi_route_prepareDeposit:
	// assetId: uint64
	txna ApplicationArgs 1
	btoi

	// mbrTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute prepareDeposit(pay,uint64)void
	callsub prepareDeposit
	int 1
	return

// prepareDeposit(mbrTxn: PayTxn, assetId: AssetID): void
prepareDeposit:
	proto 2 0

	// contracts/digital-marketplace.algo.ts:19
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts/digital-marketplace.algo.ts:20
	// assert(!this.app.address.isOptedInToAsset(this.assetId.value))
	global CurrentApplicationAddress
	byte 0x61737365744964 // "assetId"
	app_global_get
	asset_holding_get AssetBalance
	swap
	pop
	!
	assert

	// contracts/digital-marketplace.algo.ts:22
	// verifyPayTxn(mbrTxn, {
	//       receiver: this.app.address,
	//       amount: globals.minBalance + globals.assetOptInMinBalance,
	//       closeRemainderTo: globals.zeroAddress,
	//       rekeyTo: globals.zeroAddress,
	//     })
	// verify receiver
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // mbrTxn: PayTxn
	gtxns Amount
	global MinBalance
	global AssetOptInMinBalance
	+
	==
	assert

	// verify closeRemainderTo
	frame_dig -1 // mbrTxn: PayTxn
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// verify rekeyTo
	frame_dig -1 // mbrTxn: PayTxn
	gtxns RekeyTo
	global ZeroAddress
	==
	assert

	// contracts/digital-marketplace.algo.ts:29
	// sendAssetTransfer({
	//       xferAsset: this.assetId.value,
	//       assetReceiver: this.app.address,
	//       assetAmount: 0,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/digital-marketplace.algo.ts:30
	// xferAsset: this.assetId.value
	byte 0x61737365744964 // "assetId"
	app_global_get
	itxn_field XferAsset

	// contracts/digital-marketplace.algo.ts:31
	// assetReceiver: this.app.address
	global CurrentApplicationAddress
	itxn_field AssetReceiver

	// contracts/digital-marketplace.algo.ts:32
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

// deposit(axfer)void
*abi_route_deposit:
	// xfer: axfer
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int axfer
	==
	assert

	// execute deposit(axfer)void
	callsub deposit
	int 1
	return

// deposit(xfer: AssetTransferTxn): void
deposit:
	proto 1 0

	// contracts/digital-marketplace.algo.ts:37
	// verifyAssetTransferTxn(xfer, {
	//       xferAsset: this.assetId.value,
	//       assetReceiver: this.app.address,
	//       assetCloseTo: globals.zeroAddress,
	//       rekeyTo: globals.zeroAddress,
	//     })
	// verify xferAsset
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns XferAsset
	byte 0x61737365744964 // "assetId"
	app_global_get
	==
	assert

	// verify assetReceiver
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetReceiver
	global CurrentApplicationAddress
	==
	assert

	// verify assetCloseTo
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetCloseTo
	global ZeroAddress
	==
	assert

	// verify rekeyTo
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns RekeyTo
	global ZeroAddress
	==
	assert

	// contracts/digital-marketplace.algo.ts:44
	// this.deposited.value += xfer.assetAmount
	byte 0x6465706f7369746564 // "deposited"
	app_global_get
	frame_dig -1 // xfer: AssetTransferTxn
	gtxns AssetAmount
	+
	byte 0x6465706f7369746564 // "deposited"
	swap
	app_global_put
	retsub

// setPrice(uint64)void
*abi_route_setPrice:
	// totalPrice: uint64
	txna ApplicationArgs 1
	btoi

	// execute setPrice(uint64)void
	callsub setPrice
	int 1
	return

// setPrice(totalPrice: number): void
setPrice:
	proto 1 0

	// contracts/digital-marketplace.algo.ts:48
	// assert(this.txn.sender === globals.creatorAddress)
	txn Sender
	global CreatorAddress
	==
	assert

	// contracts/digital-marketplace.algo.ts:50
	// this.totalPrice.value = totalPrice
	byte 0x746f74616c5072696365 // "totalPrice"
	frame_dig -1 // totalPrice: number
	app_global_put
	retsub

// buy(pay)void
*abi_route_buy:
	// buyerTxn: pay
	txn GroupIndex
	int 1
	-
	dup
	gtxns TypeEnum
	int pay
	==
	assert

	// execute buy(pay)void
	callsub buy
	int 1
	return

// buy(buyerTxn: PayTxn): void
buy:
	proto 1 0

	// contracts/digital-marketplace.algo.ts:54
	// verifyPayTxn(buyerTxn, {
	//       sender: this.txn.sender,
	//       receiver: this.app.address,
	//       amount: this.totalPrice.value,
	//       closeRemainderTo: globals.zeroAddress,
	//       rekeyTo: globals.zeroAddress,
	//     })
	// verify sender
	frame_dig -1 // buyerTxn: PayTxn
	gtxns Sender
	txn Sender
	==
	assert

	// verify receiver
	frame_dig -1 // buyerTxn: PayTxn
	gtxns Receiver
	global CurrentApplicationAddress
	==
	assert

	// verify amount
	frame_dig -1 // buyerTxn: PayTxn
	gtxns Amount
	byte 0x746f74616c5072696365 // "totalPrice"
	app_global_get
	==
	assert

	// verify closeRemainderTo
	frame_dig -1 // buyerTxn: PayTxn
	gtxns CloseRemainderTo
	global ZeroAddress
	==
	assert

	// verify rekeyTo
	frame_dig -1 // buyerTxn: PayTxn
	gtxns RekeyTo
	global ZeroAddress
	==
	assert

	// contracts/digital-marketplace.algo.ts:62
	// sendAssetTransfer({
	//       xferAsset: this.assetId.value,
	//       assetReceiver: this.txn.sender,
	//       assetAmount: 0,
	//       assetCloseTo: this.txn.sender,
	//     })
	itxn_begin
	int axfer
	itxn_field TypeEnum

	// contracts/digital-marketplace.algo.ts:63
	// xferAsset: this.assetId.value
	byte 0x61737365744964 // "assetId"
	app_global_get
	itxn_field XferAsset

	// contracts/digital-marketplace.algo.ts:64
	// assetReceiver: this.txn.sender
	txn Sender
	itxn_field AssetReceiver

	// contracts/digital-marketplace.algo.ts:65
	// assetAmount: 0
	int 0
	itxn_field AssetAmount

	// contracts/digital-marketplace.algo.ts:66
	// assetCloseTo: this.txn.sender
	txn Sender
	itxn_field AssetCloseTo

	// Fee field not set, defaulting to 0
	int 0
	itxn_field Fee

	// Submit inner transaction
	itxn_submit
	retsub

*create_NoOp:
	method "createApplication(uint64)void"
	txna ApplicationArgs 0
	match *abi_route_createApplication
	err

*call_NoOp:
	method "prepareDeposit(pay,uint64)void"
	method "deposit(axfer)void"
	method "setPrice(uint64)void"
	method "buy(pay)void"
	txna ApplicationArgs 0
	match *abi_route_prepareDeposit *abi_route_deposit *abi_route_setPrice *abi_route_buy
	err